{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blood\\\\Documents\\\\School\\\\4A\\\\PST\\\\PST4A\\\\MUSIARK\\\\pst-4a-MusIA\\\\app\\\\src\\\\Components\\\\UrlComponent.js\",\n  _s = $RefreshSig$();\nimport '../styles/UrlContent.css';\nimport { useState, useEffect } from 'react';\nimport Prediction from './Prediction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Url(_ref) {\n  _s();\n  let {\n    isContent,\n    setIsContent,\n    isReceiving,\n    setIsReceiving\n  } = _ref;\n  const [link, setlink] = useState(\"\");\n  const [isDisplay, setIsDisplay] = useState(false);\n  const [data, setdata] = useState({});\n  const handleSubmit = event => {\n    event.preventDefault();\n    var xmlhttp = new XMLHttpRequest();\n    var url = \"http://127.0.0.1:5000/api/v01/post/URL/\";\n    xmlhttp.open(\"POST\", url, true);\n    xmlhttp.setRequestHeader(\"Content-type\", \"text\");\n    xmlhttp.onreadystatechange = function () {\n      //Call a function when the state changes.\n      if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n        setIsReceiving(true);\n      }\n    };\n    xmlhttp.send(link);\n  };\n  useEffect(() => {\n    if (isReceiving === true) {\n      fetch('http://localhost:5000/api/v01/get/resURL').then(response => {\n        console.log(response);\n        return response.json(); // <<- Return the JSON Object\n      }).then(result => {\n        setdata(result);\n        setIsDisplay(true);\n      }).catch(error => {\n        // Use .catch() to catch exceptions. Either in the request or any of your .then() blocks\n        console.error(error); // Log the error object in the console.\n        const errorMessage = 'Something went wrong';\n        console.log(errorMessage);\n      });\n    }\n  }, [isReceiving, isDisplay]);\n  return isReceiving ? /*#__PURE__*/_jsxDEV(Prediction, {\n    isDisplay: isDisplay,\n    setIsDisplay: setIsDisplay,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"UrlContent\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Entrer votre URL :\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: link,\n          onChange: e => setlink(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Url, \"J/26fhb1eCo2VO2rB5CJ8B1FoDc=\");\n_c = Url;\nexport default Url;\nvar _c;\n$RefreshReg$(_c, \"Url\");","map":{"version":3,"names":["useState","useEffect","Prediction","Url","isContent","setIsContent","isReceiving","setIsReceiving","link","setlink","isDisplay","setIsDisplay","data","setdata","handleSubmit","event","preventDefault","xmlhttp","XMLHttpRequest","url","open","setRequestHeader","onreadystatechange","readyState","status","send","fetch","then","response","console","log","json","result","catch","error","errorMessage","e","target","value"],"sources":["C:/Users/blood/Documents/School/4A/PST/PST4A/MUSIARK/pst-4a-MusIA/app/src/Components/UrlComponent.js"],"sourcesContent":["import '../styles/UrlContent.css';\r\nimport { useState, useEffect } from 'react'\r\nimport Prediction from './Prediction';\r\n\r\nfunction Url({isContent,setIsContent,isReceiving,setIsReceiving}) {\r\n  \r\n    const [link, setlink] = useState(\"\");\r\n    const [isDisplay, setIsDisplay] = useState(false);\r\n    const [data, setdata] = useState({});\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        var xmlhttp = new XMLHttpRequest();\r\n        var url = \"http://127.0.0.1:5000/api/v01/post/URL/\";\r\n        xmlhttp.open(\"POST\", url, true);\r\n        xmlhttp.setRequestHeader(\"Content-type\", \"text\");\r\n        xmlhttp.onreadystatechange = function() {//Call a function when the state changes.\r\n            if(xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n                setIsReceiving(true)\r\n            }\r\n          }\r\n          \r\n        xmlhttp.send(link);\r\n    }\r\n\r\n    useEffect(() => {\r\n      if(isReceiving===true){\r\n        fetch('http://localhost:5000/api/v01/get/resURL')\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.json(); // <<- Return the JSON Object\r\n        })\r\n        .then(result => {\r\n          setdata(result);\r\n          setIsDisplay(true);\r\n        })\r\n        .catch(error => { // Use .catch() to catch exceptions. Either in the request or any of your .then() blocks\r\n            console.error(error); // Log the error object in the console.\r\n            const errorMessage = 'Something went wrong';\r\n            console.log(errorMessage);\r\n        });\r\n      }\r\n  },[isReceiving,isDisplay]);\r\n\r\n  return isReceiving ? (\r\n    <Prediction isDisplay={isDisplay} setIsDisplay={setIsDisplay} data={data} />\r\n  )  :  (\r\n    <div className=\"UrlContent\">\r\n        \r\n        <form className='Form' onSubmit={handleSubmit}>\r\n      <label>Entrer votre URL : \r\n        <input \r\n          type=\"text\" \r\n          value={link}\r\n          onChange={(e) => setlink(e.target.value)}\r\n        />\r\n      </label>\r\n      <input type=\"submit\" className=''/>\r\n    </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Url;\r\n"],"mappings":";;AAAA,OAAO,0BAA0B;AACjC,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,cAAc;AAAC;AAEtC,SAASC,GAAG,OAAsD;EAAA;EAAA,IAArD;IAACC,SAAS;IAACC,YAAY;IAACC,WAAW;IAACC;EAAc,CAAC;EAE5D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpC,MAAMc,YAAY,GAAIC,KAAK,IAAK;IAC5BA,KAAK,CAACC,cAAc,EAAE;IACtB,IAAIC,OAAO,GAAG,IAAIC,cAAc,EAAE;IAClC,IAAIC,GAAG,GAAG,yCAAyC;IACnDF,OAAO,CAACG,IAAI,CAAC,MAAM,EAAED,GAAG,EAAE,IAAI,CAAC;IAC/BF,OAAO,CAACI,gBAAgB,CAAC,cAAc,EAAE,MAAM,CAAC;IAChDJ,OAAO,CAACK,kBAAkB,GAAG,YAAW;MAAC;MACrC,IAAGL,OAAO,CAACM,UAAU,IAAI,CAAC,IAAIN,OAAO,CAACO,MAAM,IAAI,GAAG,EAAE;QACjDjB,cAAc,CAAC,IAAI,CAAC;MACxB;IACF,CAAC;IAEHU,OAAO,CAACQ,IAAI,CAACjB,IAAI,CAAC;EACtB,CAAC;EAEDP,SAAS,CAAC,MAAM;IACd,IAAGK,WAAW,KAAG,IAAI,EAAC;MACpBoB,KAAK,CAAC,0CAA0C,CAAC,CAChDC,IAAI,CAACC,QAAQ,IAAI;QACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB,OAAOA,QAAQ,CAACG,IAAI,EAAE,CAAC,CAAC;MAC5B,CAAC,CAAC,CACDJ,IAAI,CAACK,MAAM,IAAI;QACdnB,OAAO,CAACmB,MAAM,CAAC;QACfrB,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC,CACDsB,KAAK,CAACC,KAAK,IAAI;QAAE;QACdL,OAAO,CAACK,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;QACtB,MAAMC,YAAY,GAAG,sBAAsB;QAC3CN,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;MAC7B,CAAC,CAAC;IACJ;EACJ,CAAC,EAAC,CAAC7B,WAAW,EAACI,SAAS,CAAC,CAAC;EAE1B,OAAOJ,WAAW,gBAChB,QAAC,UAAU;IAAC,SAAS,EAAEI,SAAU;IAAC,YAAY,EAAEC,YAAa;IAAC,IAAI,EAAEC;EAAK;IAAA;IAAA;IAAA;EAAA,QAAG,gBAE5E;IAAK,SAAS,EAAC,YAAY;IAAA,uBAEvB;MAAM,SAAS,EAAC,MAAM;MAAC,QAAQ,EAAEE,YAAa;MAAA,wBAChD;QAAA,WAAO,oBACL;UACE,IAAI,EAAC,MAAM;UACX,KAAK,EAAEN,IAAK;UACZ,QAAQ,EAAG4B,CAAC,IAAK3B,OAAO,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAA;UAAA;UAAA;QAAA,QACzC;MAAA;QAAA;QAAA;QAAA;MAAA,QACI,eACR;QAAO,IAAI,EAAC,QAAQ;QAAC,SAAS,EAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EAC9B;IAAA;IAAA;IAAA;EAAA,QAER;AACH;AAAC,GAzDQnC,GAAG;AAAA,KAAHA,GAAG;AA2DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
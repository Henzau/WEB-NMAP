{"ast":null,"code":"import _classCallCheck from \"C:/Users/blood/Documents/School/4A/PST/PST4A/MUSIARK/pst-4a-MusIA/app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/blood/Documents/School/4A/PST/PST4A/MUSIARK/pst-4a-MusIA/app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar EPSILON = Math.pow(2, -52);\nvar EDGE_STACK = new Uint32Array(512);\nimport { orient2d } from 'robust-predicates';\nvar Delaunator = /*#__PURE__*/function () {\n  function Delaunator(coords) {\n    _classCallCheck(this, Delaunator);\n    var n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords;\n\n    // arrays that will store the triangulation graph\n    var maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3);\n\n    // temporary arrays for tracking the edges of the advancing convex hull\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n    this._hullNext = new Uint32Array(n); // edge to next edge\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n    // temporary arrays for sorting points\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n  _createClass(Delaunator, [{\n    key: \"update\",\n    value: function update() {\n      var coords = this.coords,\n        hullPrev = this._hullPrev,\n        hullNext = this._hullNext,\n        hullTri = this._hullTri,\n        hullHash = this._hullHash;\n      var n = coords.length >> 1;\n\n      // populate an array of point indices; calculate input data bbox\n      var minX = Infinity;\n      var minY = Infinity;\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n      for (var i = 0; i < n; i++) {\n        var x = coords[2 * i];\n        var y = coords[2 * i + 1];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        this._ids[i] = i;\n      }\n      var cx = (minX + maxX) / 2;\n      var cy = (minY + maxY) / 2;\n      var minDist = Infinity;\n      var i0, i1, i2;\n\n      // pick a seed point close to the center\n      for (var _i = 0; _i < n; _i++) {\n        var d = dist(cx, cy, coords[2 * _i], coords[2 * _i + 1]);\n        if (d < minDist) {\n          i0 = _i;\n          minDist = d;\n        }\n      }\n      var i0x = coords[2 * i0];\n      var i0y = coords[2 * i0 + 1];\n      minDist = Infinity;\n\n      // find the point closest to the seed\n      for (var _i2 = 0; _i2 < n; _i2++) {\n        if (_i2 === i0) continue;\n        var _d = dist(i0x, i0y, coords[2 * _i2], coords[2 * _i2 + 1]);\n        if (_d < minDist && _d > 0) {\n          i1 = _i2;\n          minDist = _d;\n        }\n      }\n      var i1x = coords[2 * i1];\n      var i1y = coords[2 * i1 + 1];\n      var minRadius = Infinity;\n\n      // find the third point which forms the smallest circumcircle with the first two\n      for (var _i3 = 0; _i3 < n; _i3++) {\n        if (_i3 === i0 || _i3 === i1) continue;\n        var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * _i3], coords[2 * _i3 + 1]);\n        if (r < minRadius) {\n          i2 = _i3;\n          minRadius = r;\n        }\n      }\n      var i2x = coords[2 * i2];\n      var i2y = coords[2 * i2 + 1];\n      if (minRadius === Infinity) {\n        // order collinear points by dx (or dy if all x are identical)\n        // and return the list as a hull\n        for (var _i4 = 0; _i4 < n; _i4++) {\n          this._dists[_i4] = coords[2 * _i4] - coords[0] || coords[2 * _i4 + 1] - coords[1];\n        }\n        quicksort(this._ids, this._dists, 0, n - 1);\n        var hull = new Uint32Array(n);\n        var j = 0;\n        for (var _i5 = 0, d0 = -Infinity; _i5 < n; _i5++) {\n          var id = this._ids[_i5];\n          if (this._dists[id] > d0) {\n            hull[j++] = id;\n            d0 = this._dists[id];\n          }\n        }\n        this.hull = hull.subarray(0, j);\n        this.triangles = new Uint32Array(0);\n        this.halfedges = new Uint32Array(0);\n        return;\n      }\n\n      // swap the order of the seed points for counter-clockwise orientation\n      if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n        var _i6 = i1;\n        var _x = i1x;\n        var _y = i1y;\n        i1 = i2;\n        i1x = i2x;\n        i1y = i2y;\n        i2 = _i6;\n        i2x = _x;\n        i2y = _y;\n      }\n      var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n      this._cx = center.x;\n      this._cy = center.y;\n      for (var _i7 = 0; _i7 < n; _i7++) {\n        this._dists[_i7] = dist(coords[2 * _i7], coords[2 * _i7 + 1], center.x, center.y);\n      }\n\n      // sort the points by distance from the seed triangle circumcenter\n      quicksort(this._ids, this._dists, 0, n - 1);\n\n      // set up the seed triangle as the starting hull\n      this._hullStart = i0;\n      var hullSize = 3;\n      hullNext[i0] = hullPrev[i2] = i1;\n      hullNext[i1] = hullPrev[i0] = i2;\n      hullNext[i2] = hullPrev[i1] = i0;\n      hullTri[i0] = 0;\n      hullTri[i1] = 1;\n      hullTri[i2] = 2;\n      hullHash.fill(-1);\n      hullHash[this._hashKey(i0x, i0y)] = i0;\n      hullHash[this._hashKey(i1x, i1y)] = i1;\n      hullHash[this._hashKey(i2x, i2y)] = i2;\n      this.trianglesLen = 0;\n      this._addTriangle(i0, i1, i2, -1, -1, -1);\n      for (var k = 0, xp, yp; k < this._ids.length; k++) {\n        var _i8 = this._ids[k];\n        var _x2 = coords[2 * _i8];\n        var _y2 = coords[2 * _i8 + 1];\n\n        // skip near-duplicate points\n        if (k > 0 && Math.abs(_x2 - xp) <= EPSILON && Math.abs(_y2 - yp) <= EPSILON) continue;\n        xp = _x2;\n        yp = _y2;\n\n        // skip seed triangle points\n        if (_i8 === i0 || _i8 === i1 || _i8 === i2) continue;\n\n        // find a visible edge on the convex hull using edge hash\n        var start = 0;\n        for (var _j = 0, key = this._hashKey(_x2, _y2); _j < this._hashSize; _j++) {\n          start = hullHash[(key + _j) % this._hashSize];\n          if (start !== -1 && start !== hullNext[start]) break;\n        }\n        start = hullPrev[start];\n        var e = start,\n          q = void 0;\n        while (q = hullNext[e], orient2d(_x2, _y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n          e = q;\n          if (e === start) {\n            e = -1;\n            break;\n          }\n        }\n        if (e === -1) continue; // likely a near-duplicate point; skip it\n\n        // add the first triangle from the point\n        var t = this._addTriangle(e, _i8, hullNext[e], -1, -1, hullTri[e]);\n\n        // recursively flip triangles from the point until they satisfy the Delaunay condition\n        hullTri[_i8] = this._legalize(t + 2);\n        hullTri[e] = t; // keep track of boundary triangles on the hull\n        hullSize++;\n\n        // walk forward through the hull, adding more triangles and flipping recursively\n        var _n = hullNext[e];\n        while (q = hullNext[_n], orient2d(_x2, _y2, coords[2 * _n], coords[2 * _n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n          t = this._addTriangle(_n, _i8, q, hullTri[_i8], -1, hullTri[_n]);\n          hullTri[_i8] = this._legalize(t + 2);\n          hullNext[_n] = _n; // mark as removed\n          hullSize--;\n          _n = q;\n        }\n\n        // walk backward from the other side, adding more triangles and flipping\n        if (e === start) {\n          while (q = hullPrev[e], orient2d(_x2, _y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n            t = this._addTriangle(q, _i8, e, -1, hullTri[e], hullTri[q]);\n            this._legalize(t + 2);\n            hullTri[q] = t;\n            hullNext[e] = e; // mark as removed\n            hullSize--;\n            e = q;\n          }\n        }\n\n        // update the hull indices\n        this._hullStart = hullPrev[_i8] = e;\n        hullNext[e] = hullPrev[_n] = _i8;\n        hullNext[_i8] = _n;\n\n        // save the two new edges in the hash table\n        hullHash[this._hashKey(_x2, _y2)] = _i8;\n        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n      }\n      this.hull = new Uint32Array(hullSize);\n      for (var _i9 = 0, _e = this._hullStart; _i9 < hullSize; _i9++) {\n        this.hull[_i9] = _e;\n        _e = hullNext[_e];\n      }\n\n      // trim typed triangle mesh arrays\n      this.triangles = this._triangles.subarray(0, this.trianglesLen);\n      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n  }, {\n    key: \"_hashKey\",\n    value: function _hashKey(x, y) {\n      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n  }, {\n    key: \"_legalize\",\n    value: function _legalize(a) {\n      var triangles = this._triangles,\n        halfedges = this._halfedges,\n        coords = this.coords;\n      var i = 0;\n      var ar = 0;\n\n      // recursion eliminated with a fixed-size stack\n      while (true) {\n        var b = halfedges[a];\n\n        /* if the pair of triangles doesn't satisfy the Delaunay condition\n         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n         * then do the same check/flip recursively for the new pair of triangles\n         *\n         *           pl                    pl\n         *          /||\\                  /  \\\n         *       al/ || \\bl            al/    \\a\n         *        /  ||  \\              /      \\\n         *       /  a||b  \\    flip    /___ar___\\\n         *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n         *        \\  ||  /              \\      /\n         *       ar\\ || /br             b\\    /br\n         *          \\||/                  \\  /\n         *           pr                    pr\n         */\n        var a0 = a - a % 3;\n        ar = a0 + (a + 2) % 3;\n        if (b === -1) {\n          // convex hull edge\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n          continue;\n        }\n        var b0 = b - b % 3;\n        var al = a0 + (a + 1) % 3;\n        var bl = b0 + (b + 2) % 3;\n        var p0 = triangles[ar];\n        var pr = triangles[a];\n        var pl = triangles[al];\n        var p1 = triangles[bl];\n        var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n        if (illegal) {\n          triangles[a] = p1;\n          triangles[b] = p0;\n          var hbl = halfedges[bl];\n\n          // edge swapped on the other side of the hull (rare); fix the halfedge reference\n          if (hbl === -1) {\n            var e = this._hullStart;\n            do {\n              if (this._hullTri[e] === bl) {\n                this._hullTri[e] = a;\n                break;\n              }\n              e = this._hullPrev[e];\n            } while (e !== this._hullStart);\n          }\n          this._link(a, hbl);\n          this._link(b, halfedges[ar]);\n          this._link(ar, bl);\n          var br = b0 + (b + 1) % 3;\n\n          // don't worry about hitting the cap: it can only happen on extremely degenerate input\n          if (i < EDGE_STACK.length) {\n            EDGE_STACK[i++] = br;\n          }\n        } else {\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n        }\n      }\n      return ar;\n    }\n  }, {\n    key: \"_link\",\n    value: function _link(a, b) {\n      this._halfedges[a] = b;\n      if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n  }, {\n    key: \"_addTriangle\",\n    value: function _addTriangle(i0, i1, i2, a, b, c) {\n      var t = this.trianglesLen;\n      this._triangles[t] = i0;\n      this._triangles[t + 1] = i1;\n      this._triangles[t + 2] = i2;\n      this._link(t, a);\n      this._link(t + 1, b);\n      this._link(t + 2, c);\n      this.trianglesLen += 3;\n      return t;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(points) {\n      var getX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetX;\n      var getY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetY;\n      var n = points.length;\n      var coords = new Float64Array(n * 2);\n      for (var i = 0; i < n; i++) {\n        var p = points[i];\n        coords[2 * i] = getX(p);\n        coords[2 * i + 1] = getY(p);\n      }\n      return new Delaunator(coords);\n    }\n  }]);\n  return Delaunator;\n}(); // monotonically increases with real angle, but doesn't need expensive trigonometry\nexport { Delaunator as default };\nfunction pseudoAngle(dx, dy) {\n  var p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n  var dx = ax - bx;\n  var dy = ay - by;\n  return dx * dx + dy * dy;\n}\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  var dx = ax - px;\n  var dy = ay - py;\n  var ex = bx - px;\n  var ey = by - py;\n  var fx = cx - px;\n  var fy = cy - py;\n  var ap = dx * dx + dy * dy;\n  var bp = ex * ex + ey * ey;\n  var cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = 0.5 / (dx * ey - dy * ex);\n  var x = (ey * bl - dy * cl) * d;\n  var y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = 0.5 / (dx * ey - dy * ex);\n  var x = ax + (ey * bl - dy * cl) * d;\n  var y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x: x,\n    y: y\n  };\n}\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (var i = left + 1; i <= right; i++) {\n      var temp = ids[i];\n      var tempDist = dists[temp];\n      var j = i - 1;\n      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n      ids[j + 1] = temp;\n    }\n  } else {\n    var median = left + right >> 1;\n    var _i10 = left + 1;\n    var _j2 = right;\n    swap(ids, median, _i10);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[_i10]] > dists[ids[right]]) swap(ids, _i10, right);\n    if (dists[ids[left]] > dists[ids[_i10]]) swap(ids, left, _i10);\n    var _temp = ids[_i10];\n    var _tempDist = dists[_temp];\n    while (true) {\n      do _i10++; while (dists[ids[_i10]] < _tempDist);\n      do _j2--; while (dists[ids[_j2]] > _tempDist);\n      if (_j2 < _i10) break;\n      swap(ids, _i10, _j2);\n    }\n    ids[left + 1] = ids[_j2];\n    ids[_j2] = _temp;\n    if (right - _i10 + 1 >= _j2 - left) {\n      quicksort(ids, dists, _i10, right);\n      quicksort(ids, dists, left, _j2 - 1);\n    } else {\n      quicksort(ids, dists, left, _j2 - 1);\n      quicksort(ids, dists, _i10, right);\n    }\n  }\n}\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nfunction defaultGetX(p) {\n  return p[0];\n}\nfunction defaultGetY(p) {\n  return p[1];\n}","map":{"version":3,"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","orient2d","Delaunator","coords","n","length","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","Float64Array","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","i","x","y","cx","cy","minDist","i0","i1","i2","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","center","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","k","xp","yp","abs","start","key","e","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","points","getX","defaultGetX","getY","defaultGetY","p","dx","dy","ax","ay","bx","by","px","py","ex","ey","fx","fy","ap","bp","cp","cl","ids","dists","left","right","temp","tempDist","median","swap","arr","tmp"],"sources":["C:/Users/blood/Documents/School/4A/PST/PST4A/MUSIARK/pst-4a-MusIA/app/node_modules/delaunator/index.js"],"sourcesContent":["\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}